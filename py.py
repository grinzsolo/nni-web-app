# %%
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å path ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
file_path = r"C:\Users\26009648\Desktop\NNI Line\PYTHON_NNI.xlsx"
df = pd.read_excel(file_path)

# ‡∏ô‡∏¥‡∏¢‡∏≤‡∏° features ‡πÅ‡∏•‡∏∞ target
X = df[["LC", "MFR_S205", "MFR_S206", "MFR_S402C"]]
y = df["NNI"]

# ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ‡∏ó‡∏≥ normalization
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Gradient Boosting Regressor
gbr = GradientBoostingRegressor(random_state=42)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ tuning
param_grid = {
    'n_estimators': [100, 200],
    'learning_rate': [0.05, 0.1, 0.2],
    'max_depth': [3, 4, 5],
    'subsample': [0.8, 1.0]
}

# ‡πÉ‡∏ä‡πâ Grid Search ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
grid_search = GridSearchCV(estimator=gbr, param_grid=param_grid, cv=5, scoring='r2', n_jobs=-1)
grid_search.fit(X_train_scaled, y_train)

# ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test_scaled)

# ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

# ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÉ‡∏ô DataFrame
results = X_test.copy()
results["Actual_NNI"] = y_test.values
results["Predicted_NNI"] = y_pred

# Export ‡πÄ‡∏õ‡πá‡∏ô CSV
output_path = r"C:\Users\26009648\Desktop\NNI Line\NNI_Prediction_Results.csv"
results.to_csv(output_path, index=False)

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô console
print("Best Parameters:", grid_search.best_params_)
print("Root Mean Squared Error (RMSE):", rmse)
print("R¬≤ Score:", r2)
print(f"\n‚úÖ Results exported to: {output_path}")




# %%
import joblib

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏•‡∏á scaler ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô .pkl
joblib.dump(best_model, r"C:\Users\26009648\Desktop\NNI Line\best_model.pkl")
joblib.dump(scaler, r"C:\Users\26009648\Desktop\NNI Line\scaler.pkl")

print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ scaler ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

# %%
import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingRegressor

# --- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πÄ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ---
# ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå .pkl ‡πÇ‡∏õ‡∏£‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ scaler ‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏î‡∏π‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
joblib.dump(best_model, r"C:\Users\26009648\Desktop\NNI Line\best_model.pkl")
joblib.dump(scaler, r"C:\Users\26009648\Desktop\NNI Line\scaler.pkl")

# --- UI ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
st.title("üîç NNI Prediction App")
st.markdown("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ NNI")

# --- Input fields ---
lc = st.number_input("LC", min_value=0.0, step=0.1)
mfr_s205 = st.number_input("MFR_S205", min_value=0.0, step=0.1)
mfr_s206 = st.number_input("MFR_S206", min_value=0.0, step=0.1)
mfr_s402c = st.number_input("MFR_S402C", min_value=0.0, step=0.1)

if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"):
    input_df = pd.DataFrame([{
        "LC": lc,
        "MFR_S205": mfr_s205,
        "MFR_S206": mfr_s206,
        "MFR_S402C": mfr_s402c
    }])

    input_scaled = scaler.transform(input_df)
    prediction = model.predict(input_scaled)[0]

    st.success(f"üìà ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (NNI) = **{prediction:.4f}**")



